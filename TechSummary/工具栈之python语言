# 关于python语言
1. python解释型语言
这意味着开发过程中没有了编译这个环节，它可以边解释边执行
2. python 交互式语言
可以在python地交互模式下，进行着语言特性地尝试，甚至可以边开发边测试
3. python 面向对象语言
在python的世界里，一切的事物都是对象，支持继承，多态，抽象和封装等特性。
4. python 函数编程语言
在python里卖弄函数为第一类对象，支持高阶函数，匿名函数，函数对象，闭包等特性

# python语言优点
1. 易于学习：设计理念是简单，明确，优雅。着重点是如何解决问题上，而不是语法和结构
2. 易于阅读：代码定义的更清晰，更强调代码的可读性，有这良好的规范和风格。
3. 广泛并且丰富的标准库，python的标准库基本数就可以解决各类开发问题，开发效率很高。
4. 互动模式：python的解释器，可以从终端输入代码并获得结果的余元，互动的测试和调试代码片段
5. 可移植性：目前基本上各种流行的平台都支持，如windows，类unix系统，mac等。
6. 涉及到应用领域：web开发，网络编程呢个，爬虫领域，人工智能和数据挖掘，游戏开发等

# python运行方式
1. 交互式
2. 执行命令语句
3. 脚本执行

# python基础类型
## 1. 数字类型
* 布尔型：包含True，False两个值
* 整数
* 长整数
* 浮点数
* 复数
数字类型支持各种四则运算，不同类型之间运算会进行类型提升。
## 2. None类型
* 函数没有显示return语句，返回None
* None用作默认的参数，检测调用者是否为该参数传递了值。
## 3. Bool类型（属于数字类型）
* 对于数字，值0返回False，其他为True
*  空的序列（字符串，元组，列表）都返回False，其他返回True
* None，False返回False
* 空字典与集合返回False
## 4. 字符串类型
最新的格式化操作  f"{name}"

# python常用的内置数据结构
## 1. 列表类型（list）
是包含任何对象的序列，是一个可变的对象。
## 2. 元祖类型（tuple） 
在圆括号中放入一组值即可创建元组，它是一个***不可变***的对象，与列表的操作大部分相同，但是元组一旦创建后就不可修改（插入，刹删除，替换）
## 3. 字典类型（dict）
就是一个关联数组或者散列表，在大括号{}中放入值即可创建字典。
* key要求是不可变的元素（可hash），如数字，字符串，元组（不含可变对象），list不可作为字典的key
* 字典中元素遍历**不保证有序**
## 4. 集合类型（set）
包含一组无序不重复的对象，并且支持一系列标准的集合操作，并集，交集，差集等。

# python逻辑控制与io操作
1. 条件判断 if elif else
2. 循环控制 for and while break continue
3. 异常处理：解释时语法错误，运行时异常
* 异常的处理：是指我们能够针对某些异常，选择性的进行处理。
* 异常的触发：当程序出现不符合设计者的预期，可手动触发异常
* 在finally语句中，必定处理
4. 其他构建块：列表推导：python提供一种紧凑的方法，可对list中的每个元素应用一个函数或操作，从而将一个list转换成另一个list。

# pyhton IO操作
1. 标准输入输出：python对标准输入，输出，错误输出的处理，其实就是对sys三个文件对象的操作。
2. 文件的读写：文件的读写操作，最常用的打开方式 f=open(file_name, mode)
* mode r, w, a
* read, readlines,readline,close

# python 函数
为了便于维护和更好地实现代码模块化，好的程序都被分解成多个函数。以实现组织良好，重用度更高的代码块。
* 在函数定义中，最后一个参数名上加*号，函数就可以接收任意数量的参数
## 函数闭包
### 闭包的作用
1. 闭包简化我们的代码，使得代码更加紧凑
2. 通过闭包，使得我们原来的模块更容易得到重用。

### 闭包的使用场景
1.  需要对一个函数增加一些功能（装饰器的应用）
2. 将一个函数的应用部分参数，并适配到新的接口
3. 各种需要为函数保持状态的场景，但又不想使用类对象。

## 函数装饰器
通过装饰器，可以很容易对函数的执行前后或者发生异常的时候进行拦截，从而可以轻松的织入一些通用的功能到特定的方法上，或实现切面的编程。
经典的应用场景，为一个函数计时，测试性能。
需要单独一章节实现

# python类与模块
面向对象编程是一种程序设计思想，它把对象作为程序的基本单元，对象包含了数据与方法，对象之间通过消息进行通讯。
## 面向对象术语：
类：是具有相同的属性和方法的对象描述，也是对象的蓝图；
方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖，也称为方法的重写。
继承：可以使得子类具有父类的属性和方法或者重新定义，追加属性和方法等。
实例化：创建一个类的实例，生成具体的对象的过程。
方法：类中定义的函数
对象：通过类定义的数据结构实例化得到。
需要单独一章节实现
